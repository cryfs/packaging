def init(config)
  # Add system user
  config.vm.provision :shell, inline: <<-SHELL
    echo Adding system user
    useradd -m builder
  SHELL
end

def update_system(config)
  config.vm.provision :shell, inline: <<-SHELL
    echo Updating system
    DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get -y upgrade && \
    DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade
  SHELL
end

def update_gcc(config)
  # Run build one time, so the boost libraries are downloaded and compiled (we don't want that to happen on each call)
  config.vm.provision :shell, inline: <<-SHELL
    echo UpdatÃ­ng GCC
    DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y g++-4.8 gcc-4.8 cmake make && \
    DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90 && \
    DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90 
  SHELL
end

def update_cmake(config)
  config.vm.provision :shell, inline: <<-SHELL
    set -e
    echo Updating CMake
    if [ "x86_64" == "$(uname -m)" ]; then
      ARCH="x86_64"
      SHASUM="0c6e1d1dedf58b21f6bd3de9f03ca435c3d13c4e709b1d67432ca12df07d8208"
    else
      ARCH="i386"
      SHASUM="330b7bc01c6d790a66da08d16cd30b1e0538a32fca148b42fe5fe4be4cd01ca0"
    fi
    if (cat /etc/issue | grep "Ubuntu 12.04"); then
      # the cmake.org certificate is too new for the wget client on Ubuntu 12.04
      PARAMS="--no-check-certificate"
    else
      PARAMS=""
    fi
    wget ${PARAMS} https://cmake.org/files/v3.3/cmake-3.3.2-Linux-${ARCH}.tar.gz
    tar -xf cmake-3.3.2-Linux-${ARCH}.tar.gz
    if [ $(sha256sum cmake-3.3.2-Linux-${ARCH}.tar.gz | awk '{print $1;}') == "${SHASUM}" ]; then
      echo Correct sha256sum
    else
      echo Wrong sha256sum
      sha512sum cmake-3.3.2-Linux-${ARCH}.tar.gz
      exit 1
    fi
    cp -R cmake-3.3.2-Linux-${ARCH}/* /usr
  SHELL
end

def update_boost(config)
  config.vm.provision :shell, inline: <<-SHELL
    set -e
    whoami
    pwd
    # Detect number of CPU cores
    export NUMCORES=`grep -c ^processor /proc/cpuinfo`
    echo Using $NUMCORES cores
    # Install boost
    wget -O boost.tar.bz2 https://sourceforge.net/projects/boost/files/boost/1.56.0/boost_1_56_0.tar.bz2/download
    if [ $(sha512sum boost.tar.bz2 | awk '{print $1;}') == "1ce9871c3a2519682538a5f1331938b948123432d99aea0ce026958cbebd25d84019a3a28c452724b9693df98a8d1264bb2d93d2fee508453f8b42836e67481e" ]; then
      echo Correct sha512sum
    else
      echo Wrong sha512sum
      sha512sum boost.tar.bz2
      exit 1
    fi
    echo Extracting...
    tar -xf boost.tar.bz2
    cd boost_1_56_0
    ./bootstrap.sh --with-libraries=filesystem,thread,chrono,program_options
    ./b2 link=static cxxflags=-fPIC -d0 -j$NUMCORES install
    cd ..
    rm -rf boost.tar.bz2 boost_1_56_0
  SHELL
end

def update_cryptopp(config)
  config.vm.provision :shell, inline: <<-SHELL
    set -e
    export NUMCORES=`grep -c ^processor /proc/cpuinfo`
    mkdir cryptopp
    cd cryptopp
    wget -O cryptopp.zip https://www.cryptopp.com/cryptopp563.zip
    if [ $(sha512sum cryptopp.zip | awk '{print $1;}') == "b3b963e87d937aeae03aa41849c23bb03fc0a8e627afddb8aa74bc07edf51949888aaa25cb4888053455524e7c5dd8de1f11e227acfab3a3ea344285b6408ce0" ]; then
      echo Correct sha512sum
    else
      echo Wrong sha512sum
      sha512sum cryptopp.zip
      exit 1
    fi
    DEBIAN_FRONTEND=noninteractive apt-get install -y unzip
    unzip cryptopp.zip
    CXXFLAGS="-O3 -DNDEBUG -fPIC" make -f GNUmakefile-cross -j$NUMCORES static
    make install PREFIX=/usr/local
  SHELL
end

def bootstrap_ubuntu_17_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Fixing hostname
      echo "127.0.0.1 ubuntu-zesty" >> /etc/hosts

      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake g++ python libcurl4-openssl-dev libfuse-dev libcrypto++-dev libssl-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
    SHELL
end

def bootstrap_ubuntu_16_10(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Fixing hostname
      echo "127.0.0.1 ubuntu-yakkety" >> /etc/hosts

      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake g++ python libcurl4-openssl-dev libfuse-dev libcrypto++-dev libssl-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
    SHELL
end

def bootstrap_ubuntu_16_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Fixing hostname
      echo "127.0.0.1 ubuntu-xenial" >> /etc/hosts

      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake g++ python libcurl4-openssl-dev libfuse-dev libcrypto++-dev libssl-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
    SHELL
end

def bootstrap_ubuntu_15_10(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake g++ python libcurl4-openssl-dev libfuse-dev libcrypto++-dev libssl-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
    SHELL

    update_cmake(config)
end

def bootstrap_ubuntu_15_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake g++ python libcurl4-openssl-dev libfuse-dev libcrypto++-dev libssl-dev
    SHELL

    update_cmake(config)
    update_boost(config)
end

def bootstrap_ubuntu_14_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake g++ python libcurl4-openssl-dev software-properties-common libfuse-dev libcrypto++-dev libssl-dev
    SHELL

    update_cmake(config)
    update_boost(config)
end

def bootstrap_ubuntu_12_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm python software-properties-common libcurl4-openssl-dev python-software-properties libfuse-dev libssl-dev
    SHELL

    update_gcc(config)
    update_cmake(config)
    update_cryptopp(config)
    update_boost(config)
end

def bootstrap_debian_8(config)
    # Problem with debian on digital ocean: https://github.com/smdahlen/vagrant-digitalocean/issues/203
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev rpm cmake python g++ libcurl4-openssl-dev libfuse-dev fuse libcrypto++-dev libssl-dev
    SHELL

    update_cmake(config)
    update_boost(config)
end

def bootstrap_debian_7(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm dpkg-dev software-properties-common python-software-properties libcurl4-openssl-dev libfuse-dev fuse libcrypto++-dev libssl-dev

      # Update gcc
      echo Updating gcc
      printf "deb http://ftp.uk.debian.org/debian/ jessie main non-free contrib" > /etc/apt/sources.list.d/gcc.list && \
      printf "Package: *\nPin: release a=wheezy\nPin-Priority: 900\n\nPackage: gcc*\nPin: release a=jessie\nPin-Priority: 910\n" > /etc/apt/preferences && \
      DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
      DEBIAN_FRONTEND=noninteractive apt-get install -y g++-4.8 && \
      DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90 && \
      DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90 

      # Fix fuse permissions
      echo Fixing fuse permissions
      #chmod g+rw /dev/fuse
      #chgrp fuse /dev/fuse
      gpasswd -a builder fuse
    SHELL

    update_cmake(config)
    update_boost(config)
end

def setup_swap(config)
    # Add swap space to make it work with low RAM
    config.vm.provision :shell, inline: <<-SHELL
      echo Setup swap storage
      fallocate -l 4G /swapfile
      chmod 600 /swapfile
      mkswap /swapfile
      printf "/swapfile none swap sw 0 0" >> /etc/fstab
      swapon -a
      sysctl vm.swappiness=10
      printf "vm.swappiness=10\n" >> /etc/sysctl.conf
      sysctl vm.vfs_cache_pressure=50
      printf "vm.vfs_cache_pressure=50\n" >> /etc/sysctl.conf
    SHELL
end

def finish(config)
  config.vm.provision :shell, inline: <<-SHELL
    echo Finished provisioning
  SHELL
end

def provision(config, provisioner)
    config.vm.provider :virtualbox do |vb, override|
      init(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
    config.vm.provider :aws do |aws, override|
      init(override)
      #setup_swap(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
    config.vm.provider :digital_ocean do |digitalocean, override|
      init(override)
      #setup_swap(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
    config.vm.provider :google do |google, override|
      init(override)
      #setup_swap(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
end

def setup_box(config, box_name, ami, digitalocean_image, google_image)
    config.vm.provider :virtualbox do |vb, override|
      override.vm.box = box_name
    end
    config.vm.provider :aws do |aws, override|
      override.vm.box = "dummy"
      override.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
      aws.ami = ami
    end
    config.vm.provider :digital_ocean do |digitalocean, override|
      override.vm.box = "digital_ocean"
      digitalocean.image = digitalocean_image
    end
    config.vm.provider :google do |google, override|
      override.vm.box = "google"
      override.vm.box_url = "https://github.com/mitchellh/vagrant-google/raw/master/google.box"
      google.image = google_image
      google.name = google_image

      # Run in random zone (but consistently the same image in the same zone), because we have a CPU quota of max. 24 CPUs per zone.
      zones = ["asia-east1-b", "europe-west1-c", "us-central1-b", "us-east1-b"]
      google.zone = zones[google_image.sum % zones.length] # Hash box name and use it as index
    end
end

def ubuntu_ssh_setup(config)
  config.vm.provider :aws do |aws, override|
    override.ssh.username = 'ubuntu'
    override.ssh.private_key_path = "~/.ssh/vagrant-ec2.pem"
  end
  config.vm.provider :digital_ocean do |provider, override|
    override.ssh.private_key_path = "~/.ssh/vagrant-digitalocean.pem"
  end
  config.vm.provider :google do |provider, override|
    override.ssh.username = 'heinzi'
    override.ssh.private_key_path = "~/.ssh/google_compute_engine"
  end
end

def debian_ssh_setup(config)
  config.vm.provider :aws do |aws, override|
    override.ssh.username = 'admin'
    override.ssh.private_key_path = "~/.ssh/vagrant-ec2.pem"
  end
  config.vm.provider :digital_ocean do |provider, override|
    override.ssh.private_key_path = "~/.ssh/vagrant-digitalocean.pem"
  end
  config.vm.provider :google do |provider, override|
    override.ssh.username = 'heinzi'
    override.ssh.private_key_path = "~/.ssh/google_compute_engine"
  end
end

class Ubuntu1610VbguestInstaller < VagrantVbguest::Installers::Linux
  def install(opts=nil, &block)
    communicate.sudo('apt-get install -y linux-headers-4.8.0', opts, &block)
    # calling `super` will run the installation
    # also it takes care of uploading the right iso file into the box
    # and cleaning up afterward
    super
  end
end

Vagrant.configure(2) do |config|
  config.vm.provider :virtualbox do |v|
    v.memory = 8192
    v.cpus = 4
    # Needed for 32bit clients to be able to access multiple CPUs
    v.customize ["modifyvm", :id, "--ioapic", "on"]
  end

  config.vm.provider :aws do |aws, override|
    aws.access_key_id="#{ENV['AWS_ACCESS_KEY_ID']}"
    aws.secret_access_key="#{ENV['AWS_SECRET_ACCESS_KEY']}"
    aws.region = "eu-central-1"
    aws.keypair_name="vagrant-ec2"
    aws.security_groups=["ssh-only"]
    aws.instance_type = "t2.micro"
  end

  config.vm.provider :digital_ocean do |provider, override|
    provider.token = "#{ENV['DO_TOKEN']}"
    provider.region = "fra1"
    provider.size = "64gb"
  end

  config.vm.provider :google do |google, override|
    google.google_project_id = "cryfs-1156"
    google.google_client_email = "sebmessmer@gmail.com"
    google.google_json_key_location = "#{ENV['GOOGLE_JSON_KEY']}"
    google.machine_type = "n1-highcpu-32"
    google.disk_size = "10" # In GB

    # This is much cheaper, but the machine might be killed if they need resources. In that case, we have to (manually) start over.
    #google.preemptible = true
    #google.on_host_maintenance = "TERMINATE"
    #google.auto_restart = false
  end

  # -----------------------------------
  # Machines for building .deb packages
  # -----------------------------------

  config.vm.define "ubuntu-17.04-x64" do |node|
    setup_box(node, "ubuntu/zesty64", "", "ubuntu-17-04-x64", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_17_04)
    node.vbguest.installer = VagrantVbguest::Installers::Ubuntu
  end

  config.vm.define "ubuntu-17.04-x32" do |node|
    setup_box(node, "ubuntu/zesty32", "", "ubuntu-17-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_17_04)
    node.vbguest.installer = VagrantVbguest::Installers::Ubuntu
  end

  config.vm.define "ubuntu-16.10-x64" do |node|
    setup_box(node, "ubuntu/yakkety64", "", "ubuntu-16-10-x64", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_16_10)
    node.vbguest.installer = Ubuntu1610VbguestInstaller
  end

  config.vm.define "ubuntu-16.10-x32" do |node|
    setup_box(node, "ubuntu/yakkety32", "", "ubuntu-16-10-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_16_10)
    node.vbguest.installer = Ubuntu1610VbguestInstaller
  end

  config.vm.define "ubuntu-16.04-x64" do |node|
    setup_box(node, "ubuntu/xenial64", "ami-1df31172", "ubuntu-16-04-x64", "ubuntu-1604-xenial-v20160429")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_16_04)
  end

  config.vm.define "ubuntu-16.04-x32" do |node|
    setup_box(node, "ubuntu/xenial32", "", "ubuntu-16-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_16_04)
  end

  config.vm.define "ubuntu-15.10-x64" do |node|
    setup_box(node, "ubuntu/wily64", "ami-ab0210c7", "ubuntu-15-10-x64", "ubuntu-1510-wily-v20151114")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_10)
  end

  config.vm.define "ubuntu-15.10-x32" do |node|
    setup_box(node, "ubuntu/wily32", "", "ubuntu-15-10-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_10)
  end

  config.vm.define "ubuntu-15.04-x64" do |node|
    setup_box(node, "ubuntu/vivid64", "ami-900517fc", "ubuntu-15-04-x64", "ubuntu-1504-vivid-v20151120")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_04)
  end

  config.vm.define "ubuntu-15.04-x32" do |node|
    setup_box(node, "ubuntu/vivid32", "", "ubuntu-15-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_04)
  end

  config.vm.define "ubuntu-14.04-x64" do |node|
    setup_box(node, "ubuntu/trusty64", "ami-02392b6e", "ubuntu-14-04-x64", "ubuntu-1404-trusty-v20151113")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_14_04)
  end

  config.vm.define "ubuntu-14.04-x32" do |node|
    setup_box(node, "ubuntu/trusty32", "", "ubuntu-14-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_14_04)
  end

  config.vm.define "ubuntu-12.04-x64" do |node|
    setup_box(node, "ubuntu/precise64", "ami-fa041696", "ubuntu-12-04-x64", "ubuntu-1204-precise-v20151119")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_12_04)
  end

  config.vm.define "ubuntu-12.04-x32" do |node|
    setup_box(node, "ubuntu/precise32", "", "ubuntu-12-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_12_04)
  end

  config.vm.define "debian-8-x64" do |node|
    setup_box(node, "debian/jessie64", "ami-02b78e1f", "debian-8-x64", "debian-8-jessie-v20151104")
    debian_ssh_setup(node)
    provision(node, :bootstrap_debian_8)
  end

  config.vm.define "debian-8-x32" do |node|
    setup_box(node, "debian/jessie32", "", "debian-8-x32", "")
    debian_ssh_setup(node)
    provision(node, :bootstrap_debian_8)
  end

#TODO debian 7 should now work because we don't have biicode anymore
  config.vm.define "debian-7-x64" do |node|
    setup_box(node, "debian/wheezy64", "ami-98043785", "debian-7-0-x64", "")
    debian_ssh_setup(node)
    provision(node, :bootstrap_debian_7)
  end

  #config.vm.define "fedora-23-x64" do |node|
  #  setup_box(node, "fedora/23-cloud-base", "ami-ac4d5ec0", "fedora-23-x64", "")
  #  fedora_ssh_setup(node)
  #  provision(node, :bootstrap_fedora_23)
  #end

  #config.vm.define "fedora-22-x64" do |node|
  #  setup_box(node, "", "", "fedora-22-x64", "")
  #  fedora_ssh_setup(node)
  #  provision(node, :bootstrap_fedora_22)
  #end

  # ----------------------------------
  # Machines for testing .deb packages
  # ----------------------------------

  config.vm.define "ubuntu-16.10-x64-test" do |node|
    setup_box(node, "ubuntu/yakkety64", "", "ubuntu-16-10-x64", "")
    ubuntu_ssh_setup(node)
    node.vbguest.installer = Ubuntu1610VbguestInstaller
  end

  config.vm.define "ubuntu-16.10-x32-test" do |node|
    setup_box(node, "ubuntu/yakkety32", "", "ubuntu-16-10-x32", "")
    ubuntu_ssh_setup(node)
    node.vbguest.installer = Ubuntu1610VbguestInstaller
  end

  config.vm.define "ubuntu-16.04-x64-test" do |node|
    setup_box(node, "ubuntu/xenial64", "ami-1df31172", "ubuntu-16-04-x64", "ubuntu-1604-xenial-v20160429")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-16.04-x32-test" do |node|
    setup_box(node, "ubuntu/xenial32", "", "ubuntu-16-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.10-x64-test" do |node|
    setup_box(node, "ubuntu/wily64", "ami-ab0210c7", "ubuntu-15-10-x64", "ubuntu-1510-wily-v20151114")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.10-x32-test" do |node|
    setup_box(node, "ubuntu/wily32", "", "ubuntu-15-10-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.04-x64-test" do |node|
    setup_box(node, "ubuntu/vivid64", "ami-900517fc", "ubuntu-15-04-x64", "ubuntu-1504-vivid-v20151120")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.04-x32-test" do |node|
    setup_box(node, "ubuntu/vivid32", "", "ubuntu-15-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-14.04-x64-test" do |node|
    setup_box(node, "ubuntu/trusty64", "ami-02392b6e", "ubuntu-14-04-x64", "ubuntu-1404-trusty-v20151113")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-14.04-x32-test" do |node|
    setup_box(node, "ubuntu/trusty32", "", "ubuntu-14-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-12.04-x64-test" do |node|
    setup_box(node, "ubuntu/precise64", "ami-fa041696", "ubuntu-12-04-x64", "ubuntu-1204-precise-v20151119")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-12.04-x32-test" do |node|
    setup_box(node, "ubuntu/precise32", "", "ubuntu-12-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "debian-8-x64-test" do |node|
    setup_box(node, "debian/jessie64", "ami-02b78e1f", "debian-8-x64", "debian-8-jessie-v20151104")
    debian_ssh_setup(node)
  end

  config.vm.define "debian-8-x32-test" do |node|
    setup_box(node, "debian/jessie32", "", "debian-8-x32", "")
    debian_ssh_setup(node)
  end

  config.vm.define "debian-7-x64-test" do |node|
    setup_box(node, "debian/wheezy64", "ami-98043785", "debian-7-0-x64", "")
    debian_ssh_setup(node)
  end

  #config.vm.define "fedora-23-x64-test" do |node|
  #  setup_box(node, "fedora/23-cloud-base", "ami-ac4d5ec0", "fedora-23-x64", "")
  #  fedora_ssh_setup(node)
  #end

  #config.vm.define "fedora-22-x64-test" do |node|
  #  setup_box(node, "", "", "fedora-22-x64", "")
  #  fedora_ssh_setup(node)
  #end
end

