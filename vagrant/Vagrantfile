def bootstrap(config)
  # Install biicode
  config.vm.provision :shell, path: "install_biicode.sh"

  # Run build one time, so the boost libraries are downloaded and compiled (we don't want that to happen on each call)
  config.vm.provision :shell, inline: <<-SHELL
    sudo -H -u vagrant /vagrant/init_package.sh https://github.com/cryfs/cryfs 0.8.3 /tmp/sourcedir
    rm -rf /tmp/sourcedir
  SHELL
end

def update_gcc(config)
  # Run build one time, so the boost libraries are downloaded and compiled (we don't want that to happen on each call)
  config.vm.provision :shell, inline: <<-SHELL
    DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y g++-4.8 gcc-4.8 cmake make && \
    DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90 && \
    DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90
  SHELL
end

def bootstrap_ubuntu_15_10(config)
    config.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive sudo apt-get install -y git rpm cmake g++ libcurl4-openssl-dev libfuse-dev
    SHELL

    bootstrap(config)
end

def bootstrap_ubuntu_15_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive sudo apt-get install -y git rpm cmake g++ libcurl4-openssl-dev libfuse-dev
    SHELL

    bootstrap(config)
end

def bootstrap_ubuntu_14_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive sudo apt-get install -y git rpm cmake g++ libcurl4-openssl-dev software-properties-common libfuse-dev
    SHELL

    bootstrap(config)
end

def bootstrap_ubuntu_12_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive sudo apt-get install -y git rpm software-properties-common libcurl4-openssl-dev python-software-properties libfuse-dev
    SHELL

    update_gcc(config)
    bootstrap(config)
end

def bootstrap_debian_8(config)
    config.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive sudo apt-get install -y git rpm cmake g++ libcurl4-openssl-dev libfuse-dev fuse
    SHELL

    bootstrap(config)
end

def bootstrap_debian_7(config)
    config.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive sudo apt-get install -y git rpm software-properties-common python-software-properties libcurl4-openssl-dev libfuse-dev fuse
    SHELL

    update_gcc(config)
    bootstrap(config)
end

Vagrant.configure(2) do |config|
  # Update system
  config.vm.provision :shell, inline: <<-SHELL
    DEBIAN_FRONTEND=noninteractive sudo apt-get update
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y upgrade
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y dist-upgrade
  SHELL

  config.vm.provider "virtualbox" do |v|
    v.memory = 12288
    v.cpus = 4
  end

  # -----------------------------------
  # Machines for building .deb packages
  # -----------------------------------

  config.vm.define "ubuntu-15.10-x86_64" do |node|
    node.vm.box = "ubuntu/wily64"
    bootstrap_ubuntu_15_10(node)
  end

  config.vm.define "ubuntu-15.10-x86" do |node|
    node.vm.box = "ubuntu/wily32"
    bootstrap_ubuntu_15_10(node)
  end

  config.vm.define "ubuntu-15.04-x86_64" do |node|
    node.vm.box = "ubuntu/vivid64"
    bootstrap_ubuntu_15_04(node)
  end

  config.vm.define "ubuntu-15.04-x86" do |node|
    node.vm.box = "ubuntu/vivid32"
    bootstrap_ubuntu_15_04(node)
  end

  config.vm.define "ubuntu-14.04-x86_64" do |node|
    node.vm.box = "ubuntu/trusty64"
    bootstrap_ubuntu_14_04(node)
  end

  config.vm.define "ubuntu-14.04-x86" do |node|
    node.vm.box = "ubuntu/trusty32"
    bootstrap_ubuntu_14_04(node)
  end

  config.vm.define "ubuntu-12.04-x86_64" do |node|
    node.vm.box = "ubuntu/precise64"
    bootstrap_ubuntu_12_04(node)
  end

  config.vm.define "ubuntu-12.04-x86" do |node|
    node.vm.box = "ubuntu/precise32"
    bootstrap_ubuntu_12_04(node)
  end

  config.vm.define "debian-8-x86_64" do |node|
    node.vm.box = "debian/jessie64"
    bootstrap_debian_8(node)
  end

  config.vm.define "debian-8-x86" do |node|
    node.vm.box = "debian/jessie32"
    bootstrap_debian_8(node)
  end

  config.vm.define "debian-7-x86_64" do |node|
    node.vm.box = "debian/wheezy64"
    bootstrap_debian_7(node)
  end

  config.vm.define "debian-7-x86" do |node|
    node.vm.box = "debian/wheezy32"
    bootstrap_debian_7(node)
  end

  # ----------------------------------
  # Machines for testing .deb packages
  # ----------------------------------

  config.vm.define "ubuntu-15.10-x86_64-test" do |node|
    node.vm.box = "ubuntu/wily64"
  end

  config.vm.define "ubuntu-15.10-x86-test" do |node|
    node.vm.box = "ubuntu/wily32"
  end

  config.vm.define "ubuntu-15.04-x86_64-test" do |node|
    node.vm.box = "ubuntu/vivid64"
  end

  config.vm.define "ubuntu-15.04-x86-test" do |node|
    node.vm.box = "ubuntu/vivid32"
  end

  config.vm.define "ubuntu-14.04-x86_64-test" do |node|
    node.vm.box = "ubuntu/trusty64"
  end

  config.vm.define "ubuntu-14.04-x86-test" do |node|
    node.vm.box = "ubuntu/trusty32"
  end

  config.vm.define "ubuntu-12.04-x86_64-test" do |node|
    node.vm.box = "ubuntu/precise64"
  end

  config.vm.define "ubuntu-12.04-x86-test" do |node|
    node.vm.box = "ubuntu/precise32"
  end

  config.vm.define "debian-8-x86_64-test" do |node|
    node.vm.box = "debian/jessie64"
  end

  config.vm.define "debian-8-x86-test" do |node|
    node.vm.box = "debian/jessie32"
  end

  config.vm.define "debian-7-x86_64-test" do |node|
    node.vm.box = "debian/wheezy64"
  end

  config.vm.define "debian-7-x86-test" do |node|
    node.vm.box = "debian/wheezy32"
  end
end

