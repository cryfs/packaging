def init(config)
  # Add system user
  config.vm.provision :shell, inline: <<-SHELL
    echo Adding system user
    useradd -m builder
  SHELL
end

def update_system(config)
  config.vm.provision :shell, inline: <<-SHELL
    echo Updating system
    DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get -y upgrade && \
    DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade
  SHELL
end

def install_biicode(config)
  # Install biicode
  config.vm.provision :shell, path: "install_biicode.sh"
end

def update_gcc(config)
  # Run build one time, so the boost libraries are downloaded and compiled (we don't want that to happen on each call)
  config.vm.provision :shell, inline: <<-SHELL
    echo UpdatÃ­ng GCC
    DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y g++-4.8 gcc-4.8 cmake make && \
    DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90 && \
    DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90 
  SHELL
end

def bootstrap_ubuntu_15_10(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm cmake g++ python libcurl4-openssl-dev libfuse-dev
    SHELL

    install_biicode(config)
end

def bootstrap_ubuntu_15_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm cmake g++ python libcurl4-openssl-dev libfuse-dev
    SHELL

    install_biicode(config)
end

def bootstrap_ubuntu_14_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm cmake g++ python libcurl4-openssl-dev software-properties-common libfuse-dev
    SHELL

    install_biicode(config)
end

def bootstrap_ubuntu_12_04(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm python software-properties-common libcurl4-openssl-dev python-software-properties libfuse-dev
    SHELL

    update_gcc(config)
    install_biicode(config)
end

def bootstrap_debian_8(config)
    # Problem with debian on digital ocean: https://github.com/smdahlen/vagrant-digitalocean/issues/203
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm cmake python g++ libcurl4-openssl-dev libfuse-dev fuse
    SHELL

    install_biicode(config)
end

def bootstrap_debian_7(config)
    config.vm.provision :shell, inline: <<-SHELL
      echo Installing dependencies
      DEBIAN_FRONTEND=noninteractive apt-get install -y git rpm software-properties-common python-software-properties libcurl4-openssl-dev libfuse-dev fuse

      # Update gcc
      echo Updating gcc
      printf "deb http://ftp.uk.debian.org/debian/ jessie main non-free contrib" > /etc/apt/sources.list.d/gcc.list && \
      printf "Package: *\nPin: release a=wheezy\nPin-Priority: 900\n\nPackage: gcc*\nPin: release a=jessie\nPin-Priority: 910\n" > /etc/apt/preferences && \
      DEBIAN_FRONTEND=noninteractive apt-get update -qq && \
      DEBIAN_FRONTEND=noninteractive apt-get install -y g++-4.8 && \
      DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90 && \
      DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90 

      # Fix fuse permissions
      echo Fixing fuse permissions
      #chmod g+rw /dev/fuse
      #chgrp fuse /dev/fuse
      gpasswd -a builder fuse
    SHELL

    install_biicode(config)
end

def setup_swap(config)
    # Add swap space to make it work with low RAM
    config.vm.provision :shell, inline: <<-SHELL
      echo Setup swap storage
      fallocate -l 4G /swapfile
      chmod 600 /swapfile
      mkswap /swapfile
      printf "/swapfile none swap sw 0 0" >> /etc/fstab
      swapon -a
      sysctl vm.swappiness=10
      printf "vm.swappiness=10\n" >> /etc/sysctl.conf
      sysctl vm.vfs_cache_pressure=50
      printf "vm.vfs_cache_pressure=50\n" >> /etc/sysctl.conf
    SHELL
end

def finish(config)
  config.vm.provision :shell, inline: <<-SHELL
    echo Finished provisioning
  SHELL
end

def provision(config, provisioner)
    config.vm.provider :virtualbox do |vb, override|
      init(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
    config.vm.provider :aws do |aws, override|
      init(override)
      setup_swap(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
    config.vm.provider :digital_ocean do |digitalocean, override|
      init(override)
      setup_swap(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
    config.vm.provider :google do |google, override|
      init(override)
      setup_swap(override)
      update_system(override)
      self.send(provisioner, override)
      finish(override)
    end
end

def setup_box(config, box_name, ami, digitalocean_image, google_image)
    config.vm.provider :virtualbox do |vb, override|
      override.vm.box = box_name
    end
    config.vm.provider :aws do |aws, override|
      override.vm.box = "dummy"
      override.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
      aws.ami = ami
    end
    config.vm.provider :digital_ocean do |digitalocean, override|
      override.vm.box = "digital_ocean"
      digitalocean.image = digitalocean_image
    end
    config.vm.provider :google do |google, override|
      override.vm.box = "google"
      override.vm.box_url = "https://github.com/mitchellh/vagrant-google/raw/master/google.box"
      google.image = google_image
      google.name = google_image

      # Run in random zone (but consistently the same image in the same zone), because we have a CPU quota of max. 24 CPUs per zone.
      zones = ["asia-east1-b", "europe-west1-b", "us-central1-b", "us-east1-b"]
      google.zone = zones[box_name.hash % zones.length] # Hash box name and use it as index
    end
end

def ubuntu_ssh_setup(config)
  config.vm.provider :aws do |aws, override|
    override.ssh.username = 'ubuntu'
    override.ssh.private_key_path = "~/.ssh/vagrant-ec2.pem"
  end
  config.vm.provider :digital_ocean do |provider, override|
    override.ssh.private_key_path = "~/.ssh/vagrant-digitalocean.pem"
  end
  config.vm.provider :google do |provider, override|
    override.ssh.username = 'heinzi'
    override.ssh.private_key_path = "~/.ssh/google_compute_engine"
  end
end

def debian_ssh_setup(config)
  config.vm.provider :aws do |aws, override|
    override.ssh.username = 'admin'
    override.ssh.private_key_path = "~/.ssh/vagrant-ec2.pem"
  end
  config.vm.provider :digital_ocean do |provider, override|
    override.ssh.private_key_path = "~/.ssh/vagrant-digitalocean.pem"
  end
  config.vm.provider :google do |provider, override|
    override.ssh.username = 'heinzi'
    override.ssh.private_key_path = "~/.ssh/google_compute_engine"
  end
end

Vagrant.configure(2) do |config|
  config.vm.provider :virtualbox do |v|
    v.memory = 5120
    v.cpus = 1
  end

  config.vm.provider :aws do |aws, override|
    aws.access_key_id="#{ENV['AWS_ACCESS_KEY_ID']}"
    aws.secret_access_key="#{ENV['AWS_SECRET_ACCESS_KEY']}"
    aws.region = "eu-central-1"
    aws.keypair_name="vagrant-ec2"
    aws.security_groups=["ssh-only"]
    aws.instance_type = "t2.micro"
  end

  config.vm.provider :digital_ocean do |provider, override|
    provider.token = "#{ENV['DO_TOKEN']}"
    provider.region = "fra1"
    provider.size = "512mb"
  end

  config.vm.provider :google do |google, override|
    google.google_project_id = "cryfs-1156"
    google.google_client_email = "sebmessmer@gmail.com"
    google.google_json_key_location = "/home/heinzi/Informationen/cryfs/google_key.json"
    google.machine_type = "n1-highcpu-8"
    google.disk_size = "10" # In GB
    google.preemptible = true # This is much cheaper, but the machine might be killed if they need resources. In that case, we have to (manually) start over.
  end

  # -----------------------------------
  # Machines for building .deb packages
  # -----------------------------------

  config.vm.define "ubuntu-15.10-x64" do |node|
    setup_box(node, "ubuntu/wily64", "ami-ab0210c7", "ubuntu-15-10-x64", "ubuntu-1510-wily-v20151114")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_10)
  end

  config.vm.define "ubuntu-15.10-x32" do |node|
    setup_box(node, "ubuntu/wily32", "", "ubuntu-15-10-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_10)
  end

  config.vm.define "ubuntu-15.04-x64" do |node|
    setup_box(node, "ubuntu/vivid64", "ami-900517fc", "ubuntu-15-04-x64", "ubuntu-1504-vivid-v20151120")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_04)
  end

  config.vm.define "ubuntu-15.04-x32" do |node|
    setup_box(node, "ubuntu/vivid32", "", "ubuntu-15-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_15_04)
  end

  config.vm.define "ubuntu-14.04-x64" do |node|
    setup_box(node, "ubuntu/trusty64", "ami-02392b6e", "ubuntu-14-04-x64", "ubuntu-1404-trusty-v20151113")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_14_04)
  end

  config.vm.define "ubuntu-14.04-x32" do |node|
    setup_box(node, "ubuntu/trusty32", "", "ubuntu-14-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_14_04)
  end

  config.vm.define "ubuntu-12.04-x64" do |node|
    setup_box(node, "ubuntu/precise64", "ami-fa041696", "ubuntu-12-04-x64", "ubuntu-1204-precise-v20151119")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_12_04)
  end

  config.vm.define "ubuntu-12.04-x32" do |node|
    setup_box(node, "ubuntu/precise32", "", "ubuntu-12-04-x32", "")
    ubuntu_ssh_setup(node)
    provision(node, :bootstrap_ubuntu_12_04)
  end

  config.vm.define "debian-8-x64" do |node|
    setup_box(node, "debian/jessie64", "ami-02b78e1f", "debian-8-x64", "debian-8-jessie-v20151104")
    debian_ssh_setup(node)
    provision(node, :bootstrap_debian_8)
  end

  config.vm.define "debian-7-x64" do |node|
    setup_box(node, "debian/wheezy64", "ami-98043785", "debian-7-0-x64", "")
    debian_ssh_setup(node)
    provision(node, :bootstrap_debian_7)
  end

  #config.vm.define "fedora-23-x64" do |node|
  #  setup_box(node, "fedora/23-cloud-base", "ami-ac4d5ec0", "fedora-23-x64", "")
  #  fedora_ssh_setup(node)
  #  provision(node, :bootstrap_fedora_23)
  #end

  #config.vm.define "fedora-22-x64" do |node|
  #  setup_box(node, "", "", "fedora-22-x64", "")
  #  fedora_ssh_setup(node)
  #  provision(node, :bootstrap_fedora_22)
  #end

  # ----------------------------------
  # Machines for testing .deb packages
  # ----------------------------------

  config.vm.define "ubuntu-15.10-x64-test" do |node|
    setup_box(node, "ubuntu/wily64", "ami-ab0210c7", "ubuntu-15-10-x64", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.10-x32-test" do |node|
    setup_box(node, "ubuntu/wily32", "", "ubuntu-15-10-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.04-x64-test" do |node|
    setup_box(node, "ubuntu/vivid64", "ami-900517fc", "ubuntu-15-04-x64", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-15.04-x32-test" do |node|
    setup_box(node, "ubuntu/vivid32", "", "ubuntu-15-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-14.04-x64-test" do |node|
    setup_box(node, "ubuntu/trusty64", "ami-02392b6e", "ubuntu-14-04-x64", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-14.04-x32-test" do |node|
    setup_box(node, "ubuntu/trusty32", "", "ubuntu-14-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-12.04-x64-test" do |node|
    setup_box(node, "ubuntu/precise64", "ami-fa041696", "ubuntu-12-04-x64", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "ubuntu-12.04-x32-test" do |node|
    setup_box(node, "ubuntu/precise32", "", "ubuntu-12-04-x32", "")
    ubuntu_ssh_setup(node)
  end

  config.vm.define "debian-8-x64-test" do |node|
    setup_box(node, "debian/jessie64", "ami-02b78e1f", "debian-8-x64", "")
    debian_ssh_setup(node)
  end

  config.vm.define "debian-7-x64-test" do |node|
    setup_box(node, "debian/wheezy64", "ami-98043785", "debian-7-0-x64", "")
    debian_ssh_setup(node)
  end

  #config.vm.define "fedora-23-x64-test" do |node|
  #  setup_box(node, "fedora/23-cloud-base", "ami-ac4d5ec0", "fedora-23-x64", "")
  #  fedora_ssh_setup(node)
  #end

  #config.vm.define "fedora-22-x64-test" do |node|
  #  setup_box(node, "", "", "fedora-22-x64", "")
  #  fedora_ssh_setup(node)
  #end
end

